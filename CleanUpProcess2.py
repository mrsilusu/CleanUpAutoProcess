import streamlit as st
import pandas as pd
import tabula
import io
import os

# --- 1. Configura√ß√£o da P√°gina ---
st.set_page_config(
    page_title="PDF para Excel (Em Mem√≥ria) com Streamlit",
    layout="wide"
)

st.title("üìÑ PDF para DataFrame (Excel) em Mem√≥ria")
st.markdown("Esta aplica√ß√£o importa tabelas de um PDF para um objeto **Pandas DataFrame** em mem√≥ria, simulando a convers√£o para um ficheiro Excel sem a necessidade de o descarregar. O processamento usa `tabula-py`.")

# --- 2. Gest√£o de Estado (Simula√ß√£o de 'Mem√≥ria' do Excel) ---
# O Streamlit √© stateless. Usamos st.session_state para armazenar
# o DataFrame gerado entre as intera√ß√µes do utilizador.
if 'df_excel' not in st.session_state:
    st.session_state['df_excel'] = None
if 'df_extracted' not in st.session_state:
    st.session_state['df_extracted'] = None

# --- 3. Fun√ß√µes de Processamento ---

@st.cache_data(show_spinner="A processar PDF (Requer Java)...")
def convert_pdf_to_dataframe(pdf_file_bytes):
    """
    L√™ os bytes do PDF e retorna um DataFrame consolidado.
    Esta fun√ß√£o √© decorada para evitar reprocessar o ficheiro desnecessariamente.
    """
    try:
        # L√™ o ficheiro PDF em mem√≥ria
        pdf_bytes = io.BytesIO(pdf_file_bytes)
        
        # Extrai todas as tabelas de todas as p√°ginas
        # stream=True √© bom para PDFs com linhas delimitadas
        list_of_dfs = tabula.read_pdf(pdf_bytes, pages='all', multiple_tables=True, stream=True)
        
        if not list_of_dfs:
            st.error("‚ùå Nenhuma tabela foi encontrada no PDF. Tente com outro ficheiro ou ajuste as op√ß√µes de extra√ß√£o.")
            return None
            
        # Concatena todos os DataFrames em um √∫nico "Excel em mem√≥ria"
        final_df = pd.concat(list_of_dfs, ignore_index=True)
        return final_df
        
    except Exception as e:
        # Apanha erros comuns, como a falta do Java JRE
        if "No Java Runtime Environment (JRE) found" in str(e):
            st.error("‚ùå **ERRO CR√çTICO:** O 'tabula-py' requer o **Java Runtime Environment (JRE)** instalado. Verifique o seu ambiente.")
        else:
            st.error(f"‚ùå Erro inesperado durante a convers√£o: {e}")
        return None

def extract_columns(df, columns_to_extract):
    """Extrai as colunas desejadas do DataFrame principal."""
    try:
        # L√≥gica de extra√ß√£o: o cora√ß√£o do seu "fluxo de Excel gerado"
        extracted_df = df[columns_to_extract].copy()
        return extracted_df
    except KeyError as e:
        st.error(f"‚ùå Erro: Coluna n√£o encontrada. Verifique o nome da coluna: {e}")
        return None

# --- 4. Interface do Streamlit (Fluxo) ---

# --- Passo 1: Upload e Convers√£o ---
st.header("1. Importar e Converter PDF")
uploaded_file = st.file_uploader("Selecione um ficheiro PDF para convers√£o", type="pdf")

if uploaded_file is not None:
    # Mostra um spinner enquanto processa, mas s√≥ se for um novo upload ou n√£o estiver em cache
    if st.session_state['df_excel'] is None or uploaded_file.name != st.session_state.get('last_file_name'):
        st.session_state['last_file_name'] = uploaded_file.name
        
        # Passa o conte√∫do do ficheiro (bytes) para a fun√ß√£o de cache
        df_result = convert_pdf_to_dataframe(uploaded_file.read())
        
        if df_result is not None:
            st.session_state['df_excel'] = df_result
            st.session_state['df_extracted'] = None # Limpa a extra√ß√£o anterior
            st.success(f"‚úÖ Convers√£o conclu√≠da! DataFrame (Excel em Mem√≥ria) criado com sucesso com **{len(df_result)}** linhas e **{len(df_result.columns)}** colunas.")

# --- Passo 2: Visualizar e Extrair Colunas Desejadas ---
if st.session_state['df_excel'] is not None:
    df = st.session_state['df_excel']
    st.header("2. Trabalhar com o 'Excel Gerado' (DataFrame em Mem√≥ria)")
    
    # Exibe as primeiras linhas do "Excel"
    st.subheader("Pr√©-visualiza√ß√£o do DataFrame Completo")
    st.info(f"O seu DataFrame tem {len(df)} linhas. Aqui est√£o as primeiras 5.")
    st.dataframe(df.head(), use_container_width=True)
    
    # Sele√ß√£o de Colunas
    st.subheader("Extrair Colunas")
    
    # Dropdown para selecionar as colunas. Permite sele√ß√£o m√∫ltipla.
    available_columns = df.columns.tolist()
    columns_to_extract = st.multiselect(
        "Selecione as colunas que deseja extrair para o fluxo:",
        options=available_columns,
        default=available_columns # Seleciona todas por padr√£o
    )
    
    # Bot√£o para iniciar o fluxo de extra√ß√£o
    if st.button("Executar Fluxo de Extra√ß√£o"):
        if columns_to_extract:
            df_extracted = extract_columns(df, columns_to_extract)
            if df_extracted is not None:
                st.session_state['df_extracted'] = df_extracted
                st.success("‚úÖ Extra√ß√£o de colunas conclu√≠da. O novo DataFrame est√° pronto!")
        else:
            st.warning("‚ö†Ô∏è Por favor, selecione pelo menos uma coluna para extrair.")

# --- Passo 3: Apresentar o Resultado Final ---
if st.session_state['df_extracted'] is not None:
    df_final = st.session_state['df_extracted']
    st.header("3. Resultado Final do Fluxo")
    
    st.dataframe(df_final, use_container_width=True)
    
    # Op√ß√£o para Download (Opcional, mas √∫til para testes)
    csv_buffer = io.StringIO()
    df_final.to_csv(csv_buffer, index=False)
    st.download_button(
        label="Descarregar Resultado (CSV)",
        data=csv_buffer.getvalue(),
        file_name="dados_extraidos.csv",
        mime="text/csv"
    )