import streamlit as st
import pandas as pd
import pdfplumber
import io
import numpy as np
from fuzzywuzzy import fuzz
from fuzzywuzzy import process

# --- 1. Configura√ß√£o e Gest√£o de Estado ---
st.set_page_config(
    page_title="PDF para Excel (Em Mem√≥ria) com Busca Din√¢mica",
    layout="wide"
)

st.title("üìÑ PDF para DataFrame (Excel) em Mem√≥ria com Busca Din√¢mica")
st.markdown("A aplica√ß√£o converte o PDF para um DataFrame ('Excel em Mem√≥ria') e permite a busca por similaridade em **todas as c√©lulas**. Ao encontrar a c√©lula com a palavra-chave, retorna o valor da c√©lula imediatamente abaixo.")

# Inicializa√ß√£o do estado para persistir o DataFrame
if 'df_excel' not in st.session_state:
    st.session_state['df_excel'] = None

# --- 2. Fun√ß√µes de Processamento ---

@st.cache_data(show_spinner="A converter PDF para DataFrame (Excel em Mem√≥ria)...")
def convert_pdf_to_dataframe(pdf_file_bytes):
    """
    L√™ os bytes do PDF e retorna um DataFrame consolidado, usando pdfplumber.
    """
    list_of_dfs = []
    
    try:
        with pdfplumber.open(io.BytesIO(pdf_file_bytes)) as pdf:
            for page in pdf.pages:
                tabelas_pagina = page.extract_tables() 
                
                for table in tabelas_pagina:
                    # Garantir que a tabela n√£o est√° vazia
                    if table and len(table) > 1 and table[0] is not None:
                        # O primeiro elemento √© o cabe√ßalho, o resto s√£o os dados
                        # Nota: Em tabelas muito soltas, pode ser necess√°rio for√ßar a atribui√ß√£o de nomes de colunas
                        try:
                            df = pd.DataFrame(table[1:], columns=table[0])
                        except ValueError:
                            # Caso o n√∫mero de cabe√ßalhos n√£o corresponda ao n√∫mero de colunas
                            st.warning("‚ö†Ô∏è Ajuste de colunas necess√°rio: usando a primeira linha como cabe√ßalho de fallback.")
                            df = pd.DataFrame(table[1:])
                            df.columns = [f'Col_{i}' for i in range(len(df.columns))]

                        list_of_dfs.append(df)
        
        if not list_of_dfs:
            st.error("‚ùå Nenhuma tabela foi encontrada no PDF.")
            return None
            
        final_df = pd.concat(list_of_dfs, ignore_index=True)
        final_df.dropna(how='all', inplace=True) 
        return final_df
        
    except Exception as e:
        st.error(f"‚ùå Erro inesperado durante a convers√£o: {e}")
        return None

def dynamic_fuzzy_search(df, user_query, threshold=85):
    """
    Busca por similaridade em TODAS as c√©lulas do DataFrame.
    Retorna o valor da c√©lula imediatamente abaixo da melhor correspond√™ncia.
    """
    best_score = -1
    best_location = None  # (row_index, col_name)

    # Iterar sobre todas as colunas
    for col_name in df.columns:
        # Iterar sobre todas as linhas da coluna (index √© o √≠ndice da linha)
        for index, cell_value in df[col_name].items():
            if pd.isna(cell_value):
                continue
            
            # Compara a query com o valor da c√©lula
            score = fuzz.ratio(str(cell_value).lower(), user_query.lower())
            
            if score > best_score and score >= threshold:
                best_score = score
                best_location = (index, col_name)
    
    if best_location:
        row_index, col_name = best_location
        
        # O valor desejado est√° na mesma coluna (col_name) mas na linha seguinte (row_index + 1)
        next_row_index = row_index + 1
        
        if next_row_index < len(df):
            # Usamos .loc para aceder ao valor pela linha e nome da coluna
            value_below = df.loc[next_row_index, col_name]
            
            return {
                'found_at_value': df.loc[row_index, col_name],
                'column': col_name,
                'row_found': row_index + 1, # +1 para ser compat√≠vel com o n√∫mero de linha Excel
                'value_below': value_below,
                'score': best_score
            }
        else:
            return {'error': f'Correspond√™ncia encontrada em '{df.loc[row_index, col_name]}', mas √© a √∫ltima linha e n√£o h√° c√©lula abaixo para retornar.'}
    
    return {'error': f'Nenhuma correspond√™ncia com similaridade acima de {threshold}% encontrada para a busca: "{user_query}".'}


# --- 3. Interface do Streamlit (Fluxo) ---

# --- A. Upload e Convers√£o ---
st.header("1. Importar e Converter PDF")
uploaded_file = st.file_uploader("Selecione um ficheiro PDF para convers√£o", type="pdf")

if uploaded_file is not None:
    if st.session_state['df_excel'] is None or uploaded_file.name != st.session_state.get('last_file_name'):
        st.session_state['last_file_name'] = uploaded_file.name
        
        df_result = convert_pdf_to_dataframe(uploaded_file.read())
        
        if df_result is not None:
            st.session_state['df_excel'] = df_result
            st.success(f"‚úÖ Convers√£o conclu√≠da! O 'Excel em Mem√≥ria' foi criado com **{len(df_result)}** linhas.")

# --- B. Busca Din√¢mica (Fuzzy) ---
if st.session_state['df_excel'] is not None:
    df = st.session_state['df_excel']
    
    st.markdown("---")
    st.header("2. Busca Din√¢mica no 'Excel em Mem√≥ria' (Qualquer C√©lula ‚Üí C√©lula Abaixo)")
    st.markdown("Aten√ß√£o: Esta busca √© feita em **todas as c√©lulas**. Com DataFrames muito grandes, pode levar alguns segundos.")

    # √Årea de input para a busca
    search_query = st.text_input(
        "Qual a palavra-chave a buscar?",
        key="dynamic_search_input",
        placeholder="Ex: Ponto de Partida, Fim de Fibra"
    )

    if st.button("Executar Busca Din√¢mica e Retornar Valor Abaixo"):
        if search_query:
            # Chama a nova fun√ß√£o de busca din√¢mica
            result = dynamic_fuzzy_search(df, search_query)

            if 'value_below' in result:
                st.success(f"‚úÖ Palavra-chave Encontrada! (Similaridade: {result['score']}%)")
                
                st.subheader(f"Valor Retornado da C√©lula Abaixo:")
                st.markdown(f"**Palavra-chave '{result['found_at_value']}' encontrada na Linha {result['row_found']}, Coluna '{result['column']}'.**")
                st.markdown("O **valor imediatamente abaixo** na mesma coluna √©:")
                
                st.code(str(result['value_below']), language='text')

            elif 'error' in result:
                st.warning(f"‚ö†Ô∏è {result['error']}")
        else:
            st.warning("Por favor, introduza a palavra-chave para buscar.")

    # Exibe o DataFrame para contexto
    if st.checkbox("Mostrar o 'Excel em Mem√≥ria' completo"):
        st.dataframe(df, use_container_width=True)